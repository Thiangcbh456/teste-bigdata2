Saldo L√≠quido de Vagas de TI por Faixa Et√°ria 



# -*- coding: utf-8 -*-
import pandas as pd
import matplotlib.pyplot as plt
import glob
import os

# üóÇÔ∏è 1Ô∏è‚É£ Carregar todos os arquivos .parquet de janeiro a julho de 2025
arquivos = sorted(glob.glob('/content/CAGED/caged_ti_brasil_2025*.parquet'))
df_list = []

for caminho in arquivos:
    print(f"Lendo: {os.path.basename(caminho)}")
    df_temp = pd.read_parquet(caminho)

    # Corrigir poss√≠veis problemas de encoding
    df_temp.columns = [col.encode('latin1').decode('utf-8') if '√É' in col or '¬ß' in col else col for col in df_temp.columns]

    df_list.append(df_temp)

# Concatenar todos os DataFrames
df = pd.concat(df_list, ignore_index=True)

# üßπ 2Ô∏è‚É£ Limpeza e convers√µes
df['saldomovimentacao'] = pd.to_numeric(df['saldomovimentacao'], errors='coerce')
df['idade'] = pd.to_numeric(df['idade'], errors='coerce')

# üìä 3Ô∏è‚É£ Filtro estrat√©gico de CBO (fam√≠lias de TI)
familias_ti = ['1425', '2122', '2123', '2124', '3171']
df_ti = df[df['cbo2002ocupacao'].astype(str).str.startswith(tuple(familias_ti))].copy()

# üß† 4Ô∏è‚É£ Cria√ß√£o das faixas et√°rias
def faixa_etaria(idade):
    if 18 <= idade <= 25:
        return '18-25 (J√∫nior / Entrada)'
    elif 26 <= idade <= 35:
        return '26-35 (Pleno / Crescimento)'
    elif 36 <= idade <= 50:
        return '36-50 (S√™nior / Experi√™ncia)'
    elif idade >= 51:
        return '51+ (Lideran√ßa / Executivo)'
    else:
        return 'Indefinido'

df_ti['faixa_etaria'] = df_ti['idade'].apply(faixa_etaria)

# üßÆ 5Ô∏è‚É£ Calcular o saldo l√≠quido (Admiss√µes - Desligamentos)
saldo_faixa = (
    df_ti.groupby('faixa_etaria')['saldomovimentacao']
    .sum()
    .reindex(['18-25 (J√∫nior / Entrada)',
              '26-35 (Pleno / Crescimento)',
              '36-50 (S√™nior / Experi√™ncia)',
              '51+ (Lideran√ßa / Executivo)'])
)

# üé® 6Ô∏è‚É£ Configura√ß√£o de cores por faixa (gradiente + negativo)
cores = []
for valor in saldo_faixa:
    if valor < 0:
        cores.append('red')
    else:
        cores.append('#4A90E2')  # Azul padr√£o

# üî¢ 7Ô∏è‚É£ Plotar gr√°fico
plt.figure(figsize=(10, 6))
barras = plt.bar(saldo_faixa.index, saldo_faixa.values, color=cores, edgecolor='black')

# Linha de base no zero
plt.axhline(0, color='black', linewidth=1)

# R√≥tulos de valor no topo
for barra, valor in zip(barras, saldo_faixa.values):
    plt.text(barra.get_x() + barra.get_width() / 2, valor,
             f'{valor:,.0f}', ha='center',
             va='bottom' if valor >= 0 else 'top', fontsize=10, fontweight='bold')

# üéØ 8Ô∏è‚É£ T√≠tulo e eixos
plt.title('Saldo L√≠quido de Vagas de TI por Faixa Et√°ria (Admiss√µes - Desligamentos)', fontsize=13, fontweight='bold')
plt.ylabel('Saldo L√≠quido de Vagas')
plt.xlabel('Faixa Et√°ria')
plt.xticks(rotation=20, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()

plt.show()
